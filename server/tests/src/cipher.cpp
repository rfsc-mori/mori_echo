#include <boost/test/unit_test.hpp>

#include "client_crypto/test_client_crypto.hpp"

namespace mori_echo::test {

BOOST_AUTO_TEST_SUITE(cipher)

BOOST_AUTO_TEST_CASE(correct_cipher_key) {
  const auto username = std::string{"testuser"};
  const auto password = std::string{"testpass"};
  constexpr auto sequence = 87;

  const auto initial_key = crypto::calculate_initial_key({
      .username_sum = crypto::calculate_checksum(username),
      .password_sum = crypto::calculate_checksum(password),
      .sequence = sequence,
  });

  BOOST_CHECK(initial_key == 0x577F77);

  const auto expected_cipher_key = std::vector<std::uint8_t>{
      0xE5, 0xBA, 0x6B, 0xC9, 0xCE, 0xEF, 0xFC, 0x86, 0x48, 0xE1, 0x06, 0xC8,
      0x62, 0xF3, 0xB1, 0x96, 0x18, 0x72, 0xC4, 0xAD, 0xE2, 0x74, 0x9D, 0x13,
      0x51, 0xB7, 0x24, 0x8E, 0xB0, 0x2A, 0x1B, 0xB9, 0xFE, 0x60, 0x19, 0xDF,
      0x2D, 0x62, 0xF4, 0x1E, 0xFF, 0xCC, 0x16, 0x98, 0xF2, 0x44, 0x2E, 0xCF,
      0x5D, 0xD2, 0xA4, 0x0E, 0x30, 0xA9, 0x2F, 0x3D, 0x32, 0x83, 0x01, 0xA6,
      0xE7, 0x95, 0xAB, 0x09, 0x0E, 0x30, 0xA9, 0x2F, 0x3D, 0x32, 0x83, 0x00,
      0x3A, 0xEC, 0xB6, 0xB8, 0x91, 0xF7, 0x65, 0x3A};

  auto key = initial_key;
  auto cipher_key = std::vector<std::uint8_t>{};

  for (auto i = std::uint8_t{0}; i < expected_cipher_key.size(); ++i) {
    key = crypto::calculate_next_key(key);
    cipher_key.emplace_back(crypto::calculate_cipher_key(key));
  }

  BOOST_CHECK(cipher_key == expected_cipher_key);
}

BOOST_AUTO_TEST_SUITE_END()

} // namespace mori_echo::test
